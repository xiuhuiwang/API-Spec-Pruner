openapi: 3.0.0
info:
  title: Azure OpenAI Service API
  description: Azure OpenAI APIs for completions and search
  version: "1.0"
servers:
- url: https://snaplogic-agent-creator.openai.azure.com/openai
  variables:
    endpoint:
      default: your-resource-name.openai.azure.com
paths:
  /deployments:
    get:
      tags:
      - 'Deployments:'
      summary: Gets the list of deployments owned by the Azure OpenAI resource.
      operationId: Deployments_List
      parameters:
      - name: api-version
        in: query
        description: The requested API version.
        required: true
        schema:
          type: string
          x-ms-client-default: '2022-12-01'
          x-ms-parameter-location: client
        x-ms-client-default: '2022-12-01'
        x-ms-parameter-location: client
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentList'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /models:
    get:
      tags:
      - 'Models:'
      summary: "Gets a list of all models that are accessible by the Azure OpenAI\
        \ resource.\r\nThese include base models as well as all successfully completed\
        \ fine-tuned models owned by the Azure OpenAI resource."
      operationId: Models_List
      parameters:
      - name: api-version
        in: query
        description: The requested API version.
        required: true
        schema:
          type: string
          x-ms-client-default: '2022-12-01'
          x-ms-parameter-location: client
        x-ms-client-default: '2022-12-01'
        x-ms-parameter-location: client
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files:
    get:
      tags:
      - 'Files:'
      summary: "Gets a list of all files owned by the Azure OpenAI resource.\r\nThese\
        \ include user uploaded content like files with purpose \"fine-tune\" for\
        \ training or validation of fine-tunes models\r\nas well as files that are\
        \ generated by the service such as \"fine-tune-results\" which contains various\
        \ metrics for the corresponding fine-tune job."
      operationId: Files_List
      parameters:
      - name: api-version
        in: query
        description: The requested API version.
        required: true
        schema:
          type: string
          x-ms-client-default: '2022-12-01'
          x-ms-parameter-location: client
        x-ms-client-default: '2022-12-01'
        x-ms-parameter-location: client
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileList'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - 'Files:'
      summary: Creates a new file entity by uploading data from a local machine. Uploaded
        files can, for example, be used for training or evaluating fine-tuned models.
      operationId: Files_Upload
      parameters:
      - name: api-version
        in: query
        description: The requested API version.
        required: true
        schema:
          type: string
          x-ms-client-default: '2022-12-01'
          x-ms-parameter-location: client
        x-ms-client-default: '2022-12-01'
        x-ms-parameter-location: client
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              - purpose
              type: object
              properties:
                purpose:
                  type: string
                  description: The intended purpose of the uploaded documents. Use
                    "fine-tune" for fine-tuning. This allows us to validate the format
                    of the uploaded file.
                  enum:
                  - fine-tune
                  - fine-tune-results
                  x-ms-enum:
                    name: Purpose
                    modelAsString: true
                    values:
                    - value: fine-tune
                      description: This file contains training data for a fine tune
                        job.
                    - value: fine-tune-results
                      description: This file contains the results of a fine tune job.
                file:
                  type: string
                  description: Gets or sets the file to upload into Azure OpenAI.
                  format: binary
        required: true
      responses:
        '201':
          description: The file has been successfully created.
          headers:
            Location:
              description: The location of the newly created item.
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /files/{file-id}:
    delete:
      tags:
      - 'Files:'
      summary: "Deletes the file with the given file-id.\r\nDeletion is also allowed\
        \ if a file was used, e.g., as training file in a fine-tune job."
      operationId: Files_Delete
      parameters:
      - name: file-id
        in: path
        description: The identifier of the file.
        required: true
        schema:
          type: string
      - name: api-version
        in: query
        description: The requested API version.
        required: true
        schema:
          type: string
          x-ms-client-default: '2022-12-01'
          x-ms-parameter-location: client
        x-ms-client-default: '2022-12-01'
        x-ms-parameter-location: client
      responses:
        '204':
          description: The file was successfully deleted.
          content: {}
        default:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /assistants:
    get:
      operationId: List_Assistants
      tags:
      - Assistants
      summary: Returns a list of assistants.
      parameters:
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        schema:
          type: string
          default: desc
          enum:
          - asc
          - desc
          x-ms-enum:
            name: ListAssistantsOrder
            modelAsString: true
            values:
            - value: asc
              description: Order results in ascending order
            - value: desc
              description: Order results in descending order
      - name: after
        in: query
        description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        schema:
          type: string
      - name: before
        in: query
        description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          before=obj_foo in order to fetch the previous page of the list.

          '
        schema:
          type: string
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAssistantsResponse'
  /threads:
    post:
      operationId: Create_Thread
      tags:
      - Assistants
      summary: Create a thread.
      parameters:
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createThreadRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/threadObject'
  /threads/{thread_id}/messages:
    get:
      operationId: List_Messages
      tags:
      - Assistants
      summary: Returns a list of messages for a given thread.
      parameters:
      - in: path
        name: thread_id
        required: true
        schema:
          type: string
        description: The ID of the [thread](/docs/api-reference/threads) the messages
          belong to.
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        schema:
          type: string
          default: desc
          enum:
          - asc
          - desc
          x-ms-enum:
            name: ListMessagesOrder
            modelAsString: true
            values:
            - value: asc
              description: Order results in ascending order
            - value: desc
              description: Order results in descending order
      - name: after
        in: query
        description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        schema:
          type: string
      - name: before
        in: query
        description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          before=obj_foo in order to fetch the previous page of the list.

          '
        schema:
          type: string
      - name: run_id
        in: query
        description: 'Filter messages by the run ID that generated them.

          '
        schema:
          type: string
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listMessagesResponse'
    post:
      operationId: Create_Message
      tags:
      - Assistants
      summary: Create a message.
      parameters:
      - in: path
        name: thread_id
        required: true
        schema:
          type: string
        description: The ID of the [thread](/docs/api-reference/threads) to create
          a message for.
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createMessageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageObject'
  /threads/runs:
    post:
      operationId: Create_Thread_And_Run
      tags:
      - Assistants
      summary: Create a thread and run it in one request.
      parameters:
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createThreadAndRunRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
  /threads/{thread_id}/runs:
    get:
      operationId: List_Runs
      tags:
      - Assistants
      summary: Returns a list of runs belonging to a thread.
      parameters:
      - name: thread_id
        in: path
        required: true
        schema:
          type: string
        description: The ID of the thread the run belongs to.
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        schema:
          type: string
          default: desc
          enum:
          - asc
          - desc
          x-ms-enum:
            name: ListRunsOrder
            modelAsString: true
            values:
            - value: asc
              description: Order results in ascending order
            - value: desc
              description: Order results in descending order
      - name: after
        in: query
        description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        schema:
          type: string
      - name: before
        in: query
        description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          before=obj_foo in order to fetch the previous page of the list.

          '
        schema:
          type: string
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listRunsResponse'
    post:
      operationId: Create_Run
      tags:
      - Assistants
      summary: Create a run.
      parameters:
      - in: path
        name: thread_id
        required: true
        schema:
          type: string
        description: The ID of the thread to run.
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createRunRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
  /threads/{thread_id}/runs/{run_id}:
    get:
      operationId: Get_Run
      tags:
      - Assistants
      summary: Retrieves a run.
      parameters:
      - in: path
        name: thread_id
        required: true
        schema:
          type: string
        description: The ID of the [thread](/docs/api-reference/threads) that was
          run.
      - in: path
        name: run_id
        required: true
        schema:
          type: string
        description: The ID of the run to retrieve.
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
  /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      operationId: Submit_Tool_Outputs_To_Run
      tags:
      - Assistants
      summary: 'When a run has the `status: "requires_action"` and `required_action.type`
        is `submit_tool_outputs`, this endpoint can be used to submit the outputs
        from the tool calls once they''re all completed. All outputs must be submitted
        in a single request.

        '
      parameters:
      - in: path
        name: thread_id
        required: true
        schema:
          type: string
        description: The ID of the [thread](/docs/api-reference/threads) to which
          this run belongs.
      - in: path
        name: run_id
        required: true
        schema:
          type: string
        description: The ID of the run that requires the tool output submission.
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
          description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/submitToolOutputsRunRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/runObject'
  /vector_stores:
    get:
      operationId: List_Vector_Stores
      tags:
      - Vector Stores
      summary: Returns a list of vector stores.
      parameters:
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        schema:
          type: string
          default: desc
          enum:
          - asc
          - desc
          x-ms-enum:
            name: ListVectorStoresOrder
            modelAsString: true
            values:
            - value: asc
            - value: desc
      - name: after
        in: query
        description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        schema:
          type: string
      - name: before
        in: query
        description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          before=obj_foo in order to fetch the previous page of the list.

          '
        schema:
          type: string
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
        description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVectorStoresResponse'
    post:
      operationId: Create_Vector_Store
      tags:
      - Vector Stores
      summary: Create a vector store.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVectorStoreRequest'
      parameters:
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
        description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreObject'
  /vector_stores/{vector_store_id}/files:
    get:
      operationId: List_Vector_Store_Files
      tags:
      - Vector Stores
      summary: Returns a list of vector store files.
      parameters:
      - name: vector_store_id
        in: path
        description: The ID of the vector store that the files belong to.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: 'A limit on the number of objects to be returned. Limit can range
          between 1 and 100, and the default is 20.

          '
        required: false
        schema:
          type: integer
          default: 20
      - name: order
        in: query
        description: 'Sort order by the `created_at` timestamp of the objects. `asc`
          for ascending order and `desc` for descending order.

          '
        schema:
          type: string
          default: desc
          enum:
          - asc
          - desc
          x-ms-enum:
            name: ListVectorStoreFilesOrder
            modelAsString: true
            values:
            - value: asc
            - value: desc
      - name: after
        in: query
        description: 'A cursor for use in pagination. `after` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          after=obj_foo in order to fetch the next page of the list.

          '
        schema:
          type: string
      - name: before
        in: query
        description: 'A cursor for use in pagination. `before` is an object ID that
          defines your place in the list. For instance, if you make a list request
          and receive 100 objects, ending with obj_foo, your subsequent call can include
          before=obj_foo in order to fetch the previous page of the list.

          '
        schema:
          type: string
      - name: filter
        in: query
        description: Filter by file status. One of `in_progress`, `completed`, `failed`,
          `cancelled`.
        schema:
          type: string
          enum:
          - in_progress
          - completed
          - failed
          - cancelled
          x-ms-enum:
            name: ListVectorStoreFilesFilter
            modelAsString: true
            values:
            - value: in_progress
            - value: completed
            - value: failed
            - value: cancelled
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
        description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listVectorStoreFilesResponse'
    post:
      operationId: Create_Vector_Store_File
      tags:
      - Vector Stores
      summary: Create a vector store file by attaching a [File](/docs/api-reference/files)
        to a [vector store](/docs/api-reference/vector-stores/object).
      parameters:
      - in: path
        name: vector_store_id
        required: true
        schema:
          type: string
          example: vs_abc123
        description: 'The ID of the vector store for which to create a File.

          '
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
        description: api version
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createVectorStoreFileRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vectorStoreFileObject'
  /vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      operationId: Delete_Vector_Store_File
      tags:
      - Vector Stores
      summary: Delete a vector store file. This will remove the file from the vector
        store but the file itself will not be deleted. To delete the file, use the
        [delete file](/docs/api-reference/files/delete) endpoint.
      parameters:
      - in: path
        name: vector_store_id
        required: true
        schema:
          type: string
        description: The ID of the vector store that the file belongs to.
      - in: path
        name: file_id
        required: true
        schema:
          type: string
        description: The ID of the file to delete.
      - in: query
        name: api-version
        required: true
        schema:
          type: string
          example: 2024-08-01-preview
        description: api version
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteVectorStoreFileResponse'
components:
  schemas:
    Capabilities:
      title: Capabilities
      required:
      - completion
      - embeddings
      - fine_tune
      - inference
      - scale_types
      type: object
      properties:
        fine_tune:
          type: boolean
          description: A value indicating whether a model can be used for fine tuning.
        inference:
          type: boolean
          description: A value indicating whether a model can be deployed.
        completion:
          type: boolean
          description: A value indicating whether a model supports completion.
        embeddings:
          type: boolean
          description: A value indicating whether a model supports embeddings.
        scale_types:
          type: array
          description: The supported scale types for deployments of this model.
          items:
            $ref: '#/components/schemas/ScaleType'
      description: The capabilities of a base or fine tune model.
    Deployment:
      title: Deployment
      required:
      - model
      - scale_settings
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        status:
          $ref: '#/components/schemas/State'
        created_at:
          type: integer
          description: A timestamp when this job or item was created (in unix epochs).
          format: unixtime
          readOnly: true
        updated_at:
          type: integer
          description: A timestamp when this job or item was modified last (in unix
            epochs).
          format: unixtime
          readOnly: true
        id:
          type: string
          description: The identity of this item.
          readOnly: true
        model:
          minLength: 1
          type: string
          description: The OpenAI model identifier (model-id) to deploy. Can be a
            base model or a fine tune.
        owner:
          type: string
          description: The owner of this deployment. For Azure OpenAI only "organization-owner"
            is supported.
          readOnly: true
        scale_settings:
          $ref: '#/components/schemas/ScaleSettings'
        error:
          $ref: '#/components/schemas/Error'
      description: Deployments manage the reserved quota for Azure OpenAI models and
        make them available for inference requests.
    DeploymentList:
      title: DeploymentList
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        data:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Deployment'
      description: Represents a list of deployments.
    Deprecation:
      title: Deprecation
      required:
      - inference
      type: object
      properties:
        fine_tune:
          type: integer
          description: The end date of fine tune support of this model. Will be `null`
            for fine tune models.
          format: unixtime
        inference:
          type: integer
          description: The end date of inference support of this model.
          format: unixtime
      description: "Defines the dates of deprecation for the different use cases of\
        \ a model.\r\nUsually base models support 1 year of fine tuning after creation.\
        \ Inference is typically supported 2 years after creation of base or\r\nfine\
        \ tuned models. The exact dates are specified in the properties."
    Error:
      title: Error
      required:
      - code
      - message
      type: object
      properties:
        code:
          $ref: '#/components/schemas/ErrorCode'
        message:
          minLength: 1
          type: string
          description: The message of this error.
        target:
          type: string
          description: The location where the error happened if available.
        details:
          type: array
          description: The error details if available.
          items:
            x-removed-circular-ref: '#/components/schemas/Error'
            type: object
            description: Circular reference to Error was removed
        innererror:
          $ref: '#/components/schemas/InnerError'
      description: "Error content as defined in the Microsoft REST guidelines\r\n\
        (https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses)."
    ErrorCode:
      title: ErrorCode
      type: string
      description: "Error codes as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses)."
      enum:
      - conflict
      - invalidPayload
      - forbidden
      - notFound
      - unexpectedEntityState
      - itemDoesAlreadyExist
      - serviceUnavailable
      - internalFailure
      - quotaExceeded
      - jsonlValidationFailed
      - fileImportFailed
      x-ms-enum:
        name: ErrorCode
        modelAsString: true
        values:
        - value: conflict
          description: The requested operation conflicts with the current resource
            state.
        - value: invalidPayload
          description: The request data is invalid for this operation.
        - value: forbidden
          description: The operation is forbidden for the current user/api key.
        - value: notFound
          description: The resource is not found.
        - value: unexpectedEntityState
          description: The operation cannot be executed in the current resource's
            state.
        - value: itemDoesAlreadyExist
          description: The item does already exist.
        - value: serviceUnavailable
          description: The service is currently not available.
        - value: internalFailure
          description: Internal error. Please retry.
        - value: quotaExceeded
          description: Quota exceeded.
        - value: jsonlValidationFailed
          description: Validation of jsonl data failed.
        - value: fileImportFailed
          description: Import of file failed.
    ErrorResponse:
      title: ErrorResponse
      required:
      - error
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      description: "Error response as defined in the Microsoft REST guidelines\r\n\
        (https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses)."
    File:
      title: File
      required:
      - filename
      - purpose
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        status:
          $ref: '#/components/schemas/State'
        created_at:
          type: integer
          description: A timestamp when this job or item was created (in unix epochs).
          format: unixtime
          readOnly: true
        updated_at:
          type: integer
          description: A timestamp when this job or item was modified last (in unix
            epochs).
          format: unixtime
          readOnly: true
        id:
          type: string
          description: The identity of this item.
          readOnly: true
        bytes:
          type: integer
          description: "The size of this file when available (can be null). File sizes\
            \ larger than 2^53-1 are not supported to ensure compatibility\r\nwith\
            \ JavaScript integers."
          format: int64
          readOnly: true
        purpose:
          $ref: '#/components/schemas/Purpose'
        filename:
          minLength: 1
          type: string
          description: The name of the file.
        statistics:
          $ref: '#/components/schemas/FileStatistics'
        error:
          $ref: '#/components/schemas/Error'
      description: A file is a document usable for training and validation. It can
        also be a service generated document with result details.
    FileList:
      title: FileList
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        data:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/File'
      description: Represents a list of files.
    FileStatistics:
      title: FileStatistics
      type: object
      properties:
        tokens:
          type: integer
          description: The number of tokens used in prompts and completions for files
            of kind "fine-tune" once validation of file content is complete.
          format: int32
        examples:
          type: integer
          description: The number of contained training examples in files of kind
            "fine-tune" once validation of file content is complete.
          format: int32
      description: A file is a document usable for training and validation. It can
        also be a service generated document with result details.
    InnerError:
      title: InnerError
      type: object
      properties:
        code:
          $ref: '#/components/schemas/InnerErrorCode'
        innererror:
          x-removed-circular-ref: '#/components/schemas/InnerError'
          type: object
          description: Circular reference to InnerError was removed
      description: "Inner error as defined in the Microsoft REST guidelines\r\n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses)."
    InnerErrorCode:
      title: InnerErrorCode
      type: string
      description: "Inner error codes as defined in the Microsoft REST guidelines\r\
        \n(https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses)."
      enum:
      - invalidPayload
      x-ms-enum:
        name: InnerErrorCode
        modelAsString: true
        values:
        - value: invalidPayload
          description: The request data is invalid for this operation.
    LifeCycleStatus:
      title: LifeCycleStatus
      type: string
      description: "The life cycle status of a model.\r\nNote: A model can be promoted\
        \ from \"preview\" to \"generally-available\", but never from \"generally-available\"\
        \ to \"preview\"."
      enum:
      - preview
      - generally-available
      x-ms-enum:
        name: LifeCycleStatus
        modelAsString: true
        values:
        - value: preview
          description: Model is in preview and covered by the service preview terms.
        - value: generally-available
          description: Model is generally available.
    Model:
      title: Model
      required:
      - capabilities
      - deprecation
      - lifecycle_status
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        status:
          $ref: '#/components/schemas/State'
        created_at:
          type: integer
          description: A timestamp when this job or item was created (in unix epochs).
          format: unixtime
          readOnly: true
        updated_at:
          type: integer
          description: A timestamp when this job or item was modified last (in unix
            epochs).
          format: unixtime
          readOnly: true
        id:
          type: string
          description: The identity of this item.
          readOnly: true
        model:
          type: string
          description: The base model identity (model-id) if this is a fine tune model;
            otherwise `null`.
        fine_tune:
          type: string
          description: The fine tune job identity (fine-tune-id) if this is a fine
            tune model; otherwise `null`.
        capabilities:
          $ref: '#/components/schemas/Capabilities'
        lifecycle_status:
          $ref: '#/components/schemas/LifeCycleStatus'
        deprecation:
          $ref: '#/components/schemas/Deprecation'
      description: A model is either a base model or the result of a successful fine
        tune job.
    ModelList:
      title: ModelList
      type: object
      properties:
        object:
          $ref: '#/components/schemas/TypeDiscriminator'
        data:
          type: array
          description: The list of items.
          items:
            $ref: '#/components/schemas/Model'
      description: Represents a list of models.
    Purpose:
      title: Purpose
      type: string
      description: The intended purpose of the uploaded documents. Use "fine-tune"
        for fine-tuning. This allows us to validate the format of the uploaded file.
      enum:
      - fine-tune
      - fine-tune-results
      x-ms-enum:
        name: Purpose
        modelAsString: true
        values:
        - value: fine-tune
          description: This file contains training data for a fine tune job.
        - value: fine-tune-results
          description: This file contains the results of a fine tune job.
    ScaleSettings:
      title: ScaleSettings
      required:
      - scale_type
      type: object
      properties:
        scale_type:
          $ref: '#/components/schemas/ScaleType'
      description: The scale settings of a deployment. It defines the modes for scaling
        and the reserved capacity.
      discriminator:
        propertyName: scale_type
    ScaleType:
      title: ScaleType
      type: string
      description: Defines how scaling operations will be executed.
      enum:
      - manual
      - standard
      x-ms-enum:
        name: ScaleType
        modelAsString: true
        values:
        - value: manual
          description: Scaling of a deployment will happen by manually specifying
            the capacity of a model.
        - value: standard
          description: Scaling of a deployment will happen automatically based on
            usage.
    State:
      title: State
      type: string
      description: The state of a job or item.
      enum:
      - notRunning
      - running
      - succeeded
      - canceled
      - failed
      - deleted
      x-ms-enum:
        name: State
        modelAsString: true
        values:
        - value: notRunning
          description: The operation was created and is not queued to be processed
            in the future.
        - value: running
          description: The operation has started to be processed.
        - value: succeeded
          description: The operation has successfully be processed and is ready for
            consumption.
        - value: canceled
          description: The operation has been canceled and is incomplete.
        - value: failed
          description: The operation has completed processing with a failure and cannot
            be further consumed.
        - value: deleted
          description: The entity has been deleted but may still be referenced by
            other entities predating the deletion.
    TypeDiscriminator:
      title: TypeDiscriminator
      type: string
      description: Defines the type of an object.
      enum:
      - list
      - fine-tune
      - file
      - fine-tune-event
      - model
      - deployment
      x-ms-enum:
        name: TypeDiscriminator
        modelAsString: true
        values:
        - value: list
          description: This object represents a list of other objects.
        - value: fine-tune
          description: This object represents a fine tune job.
        - value: file
          description: This object represents a file.
        - value: fine-tune-event
          description: This object represents an event of a fine tune job.
        - value: model
          description: This object represents a model (can be a base models or fine
            tune job result).
        - value: deployment
          description: This object represents a deployment.
    assistantObject:
      type: object
      title: Assistant
      description: Represents an `assistant` that can call the model and use tools.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `assistant`.
          type: string
          enum:
          - assistant
          x-ms-enum:
            name: AssistantObjectType
            modelAsString: true
            values:
            - value: assistant
        created_at:
          type: integer
          description: The Unix timestamp (in seconds) for when the assistant was
            created.
        name:
          description: 'The name of the assistant. The maximum length is 256 characters.

            '
          type: string
          maxLength: 256
          nullable: true
        description:
          description: 'The description of the assistant. The maximum length is 512
            characters.

            '
          type: string
          maxLength: 512
          nullable: true
        model:
          description: 'ID of the model to use. You can use the [List models](/docs/api-reference/models/list)
            API to see all of your available models, or see our [Model overview](/docs/models/overview)
            for descriptions of them.

            '
          type: string
        instructions:
          description: 'The system instructions that the assistant uses. The maximum
            length is 256,000 characters.

            '
          type: string
          maxLength: 256000
          nullable: true
        tools:
          description: 'A list of tool enabled on the assistant. There can be a maximum
            of 128 tools per assistant. Tools can be of types `code_interpreter`,
            `file_search`, or `function`.

            '
          default: []
          type: array
          maxItems: 128
          items:
            oneOf:
            - $ref: '#/components/schemas/assistantToolsCode'
            - $ref: '#/components/schemas/assistantToolsFileSearch'
            - $ref: '#/components/schemas/assistantToolsFunction'
        tool_resources:
          type: object
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of file IDs made available to the `code_interpreter``
                    tool. There can be a maximum of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The ID of the vector store attached to this assistant.
                    There can be a maximum of 1 vector store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: string
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
        temperature:
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
          nullable: true
      required:
      - id
      - object
      - created_at
      - name
      - description
      - model
      - instructions
      - tools
      - metadata
    assistantToolsCode:
      type: object
      title: Code interpreter tool
      properties:
        type:
          type: string
          description: 'The type of tool being defined: `code_interpreter`'
          enum:
          - code_interpreter
          x-ms-enum:
            name: assistantToolsCodeType
            modelAsString: true
            values:
            - value: code_interpreter
      required:
      - type
    assistantToolsFileSearch:
      type: object
      title: FileSearch tool
      properties:
        type:
          type: string
          description: 'The type of tool being defined: `file_search`'
          enum:
          - file_search
          x-ms-enum:
            name: assistantToolsFileSearchType
            modelAsString: true
            values:
            - value: file_search
        file_search:
          type: object
          description: Overrides for the file search tool.
          properties:
            max_num_results:
              type: integer
              minimum: 1
              maximum: 50
              description: 'The maximum number of results the file search tool should
                output. The

                default is 20 for gpt-4* models and 5 for gpt-3.5-turbo. This number

                should be between 1 and 50 inclusive.



                Note that the file search tool may output fewer than `max_num_results`

                results. See the [file search tool

                documentation](/docs/assistants/tools/file-search/number-of-chunks-returned)

                for more information.

                '
      required:
      - type
    assistantToolsFileSearchTypeOnly:
      type: object
      title: FileSearch tool
      properties:
        type:
          type: string
          description: 'The type of tool being defined: `file_search`'
          enum:
          - file_search
          x-ms-enum:
            name: assistantToolsFileSearchType
            modelAsString: true
            values:
            - value: file_search
      required:
      - type
    assistantToolsFunction:
      type: object
      title: Function tool
      properties:
        type:
          type: string
          description: 'The type of tool being defined: `function`'
          enum:
          - function
          x-ms-enum:
            name: assistantToolsFunction
            modelAsString: true
            values:
            - value: function
        function:
          type: object
          description: The function definition.
          properties:
            description:
              type: string
              description: A description of what the function does, used by the model
                to choose when and how to call the function.
            name:
              type: string
              description: The name of the function to be called. Must be a-z, A-Z,
                0-9, or contain underscores and dashes, with a maximum length of 64.
            parameters:
              $ref: '#/components/schemas/chatCompletionFunctionParameters'
          required:
          - name
          - parameters
          - description
      required:
      - type
      - function
    assistantsApiResponseFormat:
      type: object
      description: 'An object describing the expected output of the model. If `json_object`
        only `function` type `tools` are allowed to be passed to the Run. If `text`
        the model can return text or any value needed.

        '
      properties:
        type:
          type: string
          enum:
          - text
          - json_object
          x-ms-enum:
            name: AssistantsApiResponseFormat
            modelAsString: true
            values:
            - value: text
            - value: json_object
          example: json_object
          default: text
          description: Must be one of `text` or `json_object`.
    assistantsApiResponseFormatOption:
      description: 'Specifies the format that the model must output. Compatible with
        GPT-4 Turbo and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.


        Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees
        the message the model generates is valid JSON.


        **Important:** when using JSON mode, you **must** also instruct the model
        to produce JSON yourself via a system or user message. Without this, the model
        may generate an unending stream of whitespace until the generation reaches
        the token limit, resulting in a long-running and seemingly "stuck" request.
        Also note that the message content may be partially cut off if `finish_reason="length"`,
        which indicates the generation exceeded `max_tokens` or the conversation exceeded
        the max context length.

        '
      oneOf:
      - type: string
        description: '`auto` is the default value

          '
        enum:
        - none
        - auto
        x-ms-enum:
          name: AssistantsApiResponseFormatOption
          modelAsString: true
          values:
          - value: none
          - value: auto
      - $ref: '#/components/schemas/assistantsApiResponseFormat'
    assistantsApiToolChoiceOption:
      description: 'Controls which (if any) tool is called by the model.

        `none` means the model will not call any tools and instead generates a message.

        `auto` is the default value and means the model can pick between generating
        a message or calling a tool.

        Specifying a particular tool like `{"type": "file_search"}` or `{"type": "function",
        "function": {"name": "my_function"}}` forces the model to call that tool.

        '
      oneOf:
      - type: string
        description: '`none` means the model will not call a function and instead
          generates a message. `auto` means the model can pick between generating
          a message or calling a function.

          '
        enum:
        - none
        - auto
        x-ms-enum:
          name: AssistantsApiToolChoiceOption
          modelAsString: true
          values:
          - value: none
          - value: auto
      - $ref: '#/components/schemas/assistantsNamedToolChoice'
    assistantsNamedToolChoice:
      type: object
      description: Specifies a tool the model should use. Use to force the model to
        call a specific tool.
      properties:
        type:
          type: string
          enum:
          - function
          - code_interpreter
          - file_search
          description: The type of the tool. If type is `function`, the function name
            must be set
          x-ms-enum:
            name: AssistantsNamedToolChoiceType
            modelAsString: true
            values:
            - value: function
            - value: code_interpreter
            - value: file_search
        function:
          type: object
          properties:
            name:
              type: string
              description: The name of the function to call.
          required:
          - name
      required:
      - type
    autoChunkingStrategyRequestParam:
      type: object
      title: Auto Chunking Strategy
      description: 'The default strategy. This strategy currently uses a `max_chunk_size_tokens`

        of `800` and `chunk_overlap_tokens` of `400`.

        '
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `auto`.
          enum:
          - auto
      required:
      - type
    chatCompletionFunctionParameters:
      type: object
      description: The parameters the functions accepts, described as a JSON Schema
        object. See the [guide/](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/function-calling)
        for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/)
        for documentation about the format.
      additionalProperties: true
    chunkingStrategyRequestParam:
      type: object
      description: The chunking strategy used to chunk the file(s). If not set, will
        use the `auto` strategy.
      oneOf:
      - $ref: '#/components/schemas/autoChunkingStrategyRequestParam'
      - $ref: '#/components/schemas/staticChunkingStrategyRequestParam'
    createMessageRequest:
      type: object
      additionalProperties: false
      required:
      - role
      - content
      properties:
        role:
          type: string
          enum:
          - user
          - assistant
          x-ms-enum:
            name: CreateMessageRequestRole
            modelAsString: true
            values:
            - value: user
            - value: assistant
          description: 'The role of the entity that is creating the message. Allowed
            values include:

            - `user`: Indicates the message is sent by an actual user and should be
            used in most cases to represent user-generated messages.

            - `assistant`: Indicates the message is generated by the assistant. Use
            this value to insert messages from the assistant into the conversation.

            '
        content:
          type: string
          minLength: 1
          maxLength: 256000
          description: The content of the message.
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/assistantToolsCode'
                  - $ref: '#/components/schemas/assistantToolsFileSearchTypeOnly'
                  x-oaiExpandable: true
          description: A list of files attached to the message, and the tools they
            should be added to.
          required:
          - file_id
          - tools
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
    createRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the assistant to use to execute this run.
          type: string
        model:
          description: The ID of the Model to be used to execute this run. If a value
            is provided here, it will override the model associated with the assistant.
            If not, the model associated with the assistant will be used.
          type: string
          nullable: true
        instructions:
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          type: string
          nullable: true
        additional_instructions:
          description: Appends additional instructions at the end of the instructions
            for the run. This is useful for modifying the behavior on a per-run basis
            without overriding other instructions.
          type: string
          nullable: true
        additional_messages:
          description: Adds additional messages to the thread before creating the
            run.
          type: array
          items:
            $ref: '#/components/schemas/createMessageRequest'
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/assistantToolsCode'
            - $ref: '#/components/schemas/assistantToolsFileSearch'
            - $ref: '#/components/schemas/assistantToolsFunction'
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
          nullable: true
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
          nullable: true
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
          nullable: true
      required:
      - assistant_id
    createThreadAndRunRequest:
      type: object
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the assistant to use to execute this run.
          type: string
        thread:
          $ref: '#/components/schemas/createThreadRequest'
          description: If no thread is provided, an empty thread will be created.
        model:
          description: The ID of the [Model](/docs/api-reference/models) to be used
            to execute this run. If a value is provided here, it will override the
            model associated with the assistant. If not, the model associated with
            the assistant will be used.
          type: string
          nullable: true
        instructions:
          description: Override the default system message of the assistant. This
            is useful for modifying the behavior on a per-run basis.
          type: string
          nullable: true
        tools:
          description: Override the tools the assistant can use for this run. This
            is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/assistantToolsCode'
            - $ref: '#/components/schemas/assistantToolsFileSearch'
            - $ref: '#/components/schemas/assistantToolsFunction'
        tool_resources:
          type: object
          description: 'A set of resources that are used by the assistant''s tools.
            The resources are specific to the type of tool. For example, the `code_interpreter`
            tool requires a list of file IDs, while the `file_search` tool requires
            a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of file IDs made available to the `code_interpreter`
                    tool. There can be a maximum of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The ID of the vector store attached to this assistant.
                    There can be a maximum of 1 vector store attached to the assistant.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
        temperature:
          type: number
          minimum: 0
          maximum: 2
          default: 1
          example: 1
          nullable: true
          description: 'What sampling temperature to use, between 0 and 2. Higher
            values like 0.8 will make the output more random, while lower values like
            0.2 will make it more focused and deterministic.

            '
        top_p:
          type: number
          minimum: 0
          maximum: 1
          default: 1
          example: 1
          nullable: true
          description: 'An alternative to sampling with temperature, called nucleus
            sampling, where the model considers the results of the tokens with top_p
            probability mass. So 0.1 means only the tokens comprising the top 10%
            probability mass are considered.


            We generally recommend altering this or temperature but not both.

            '
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of prompt tokens specified, across multiple turns of the run. If
            the run exceeds the number of prompt tokens specified, the run will end
            with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens that may be used over
            the course of the run. The run will make a best effort to use only the
            number of completion tokens specified, across multiple turns of the run.
            If the run exceeds the number of completion tokens specified, the run
            will end with status `incomplete`. See `incomplete_details` for more info.

            '
          minimum: 256
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
          nullable: true
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
          nullable: true
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
          nullable: true
      required:
      - assistant_id
    createThreadRequest:
      type: object
      additionalProperties: false
      properties:
        messages:
          description: A list of messages to start the thread with.
          type: array
          items:
            $ref: '#/components/schemas/createMessageRequest'
        tool_resources:
          type: object
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of file IDs made available to the `code_interpreter`
                    tool. There can be a maximum of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The vector store attached to this thread. There can
                    be a maximum of 1 vector store attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: string
                vector_stores:
                  type: array
                  description: 'A helper to create a vector store with file_ids and
                    attach it to this thread. There can be a maximum of 1 vector store
                    attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: object
                    properties:
                      file_ids:
                        type: array
                        description: 'A list of file IDs to add to the vector store.
                          There can be a maximum of 10000 files in a vector store.

                          '
                        maxItems: 10000
                        items:
                          type: string
                      chunking_strategy:
                        type: object
                        description: The chunking strategy used to chunk the file(s).
                          If not set, will use the `auto` strategy.
                        oneOf:
                        - type: object
                          title: Auto Chunking Strategy
                          description: The default strategy. This strategy currently
                            uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens`
                            of `400`.
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `auto`.
                              enum:
                              - auto
                              x-ms-enum:
                                name: AutoChunkingStrategyType
                                modelAsString: true
                                values:
                                - value: auto
                          required:
                          - type
                        - type: object
                          title: Static Chunking Strategy
                          additionalProperties: false
                          properties:
                            type:
                              type: string
                              description: Always `static`.
                              enum:
                              - static
                              x-ms-enum:
                                name: StaticChunkingStrategyType
                                modelAsString: true
                                values:
                                - value: static
                            static:
                              type: object
                              additionalProperties: false
                              properties:
                                max_chunk_size_tokens:
                                  type: integer
                                  minimum: 100
                                  maximum: 4096
                                  description: The maximum number of tokens in each
                                    chunk. The default value is `800`. The minimum
                                    value is `100` and the maximum value is `4096`.
                                chunk_overlap_tokens:
                                  type: integer
                                  description: 'The number of tokens that overlap
                                    between chunks. The default value is `400`.


                                    Note that the overlap must not exceed half of
                                    `max_chunk_size_tokens`.

                                    '
                              required:
                              - max_chunk_size_tokens
                              - chunk_overlap_tokens
                          required:
                          - type
                          - static
                      metadata:
                        type: object
                        description: 'Set of 16 key-value pairs that can be attached
                          to a vector store. This can be useful for storing additional
                          information about the vector store in a structured format.
                          Keys can be a maximum of 64 characters long and values can
                          be a maximum of 512 characters long.

                          '
              oneOf:
              - required:
                - vector_store_ids
              - required:
                - vector_stores
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
    createVectorStoreFileRequest:
      type: object
      additionalProperties: false
      properties:
        file_id:
          description: A File ID that the vector store should use. Useful for tools
            like `file_search` that can access files.
          type: string
        chunking_strategy:
          $ref: '#/components/schemas/chunkingStrategyRequestParam'
      required:
      - file_id
    createVectorStoreRequest:
      type: object
      additionalProperties: false
      properties:
        file_ids:
          description: A list of file IDs that the vector store should use. Useful
            for tools like `file_search` that can access files.
          type: array
          maxItems: 500
          items:
            type: string
        name:
          description: The name of the vector store.
          type: string
        expires_after:
          $ref: '#/components/schemas/vectorStoreExpirationAfter'
        chunking_strategy:
          type: object
          description: The chunking strategy used to chunk the file(s). If not set,
            will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
          - $ref: '#/components/schemas/autoChunkingStrategyRequestParam'
          - $ref: '#/components/schemas/staticChunkingStrategyRequestParam'
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
    deleteVectorStoreFileResponse:
      type: object
      properties:
        id:
          type: string
        deleted:
          type: boolean
        object:
          type: string
          enum:
          - vector_store.file.deleted
          x-ms-enum:
            name: DeleteVectorStoreFileResponseObject
            modelAsString: true
            values:
            - value: vector_store.file.deleted
      required:
      - id
      - object
      - deleted
    listAssistantsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/assistantObject'
        first_id:
          type: string
          example: asst_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: asst_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    listMessagesResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/messageObject'
        first_id:
          type: string
          example: msg_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: msg_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    listRunsResponse:
      type: object
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/runObject'
        first_id:
          type: string
          example: run_hLBK7PXBv5Lr2NQT7KLY0ag1
        last_id:
          type: string
          example: run_QLoItBbqwyAJEzlTy4y9kOMM
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    listVectorStoreFilesResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/vectorStoreFileObject'
        first_id:
          type: string
          example: file-abc123
        last_id:
          type: string
          example: file-abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    listVectorStoresResponse:
      properties:
        object:
          type: string
          example: list
        data:
          type: array
          items:
            $ref: '#/components/schemas/vectorStoreObject'
        first_id:
          type: string
          example: vs_abc123
        last_id:
          type: string
          example: vs_abc456
        has_more:
          type: boolean
          example: false
      required:
      - object
      - data
      - first_id
      - last_id
      - has_more
    messageContentImageFileObject:
      title: Image file
      type: object
      description: References an image file in the content of a message.
      properties:
        type:
          description: Always `image_file`.
          type: string
          enum:
          - image_file
          x-ms-enum:
            name: MessageContentImageFileObjectType
            modelAsString: true
            values:
            - value: image_file
              description: The message content image file type
        image_file:
          type: object
          properties:
            file_id:
              description: The file ID of the image in the message content.
              type: string
          required:
          - file_id
      required:
      - type
      - image_file
    messageContentTextAnnotationsFileCitationObject:
      title: File citation
      type: object
      description: A citation within the message that points to a specific quote from
        a specific File associated with the assistant or the message. Generated when
        the assistant uses the "retrieval" tool to search files.
      properties:
        type:
          description: Always `file_citation`.
          type: string
          enum:
          - file_citation
          x-ms-enum:
            name: FileCitationObjectType
            modelAsString: true
            values:
            - value: file_citation
              description: The file citation object type
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_citation:
          type: object
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
          - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - type
      - text
      - file_citation
      - start_index
      - end_index
    messageContentTextAnnotationsFilePathObject:
      title: File path
      type: object
      description: A URL for the file that's generated when the assistant used the
        `code_interpreter` tool to generate a file.
      properties:
        type:
          description: Always `file_path`.
          type: string
          enum:
          - file_path
          x-ms-enum:
            name: FilePathObjectType
            modelAsString: true
            values:
            - value: file_path
              description: The file path object type
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        file_path:
          type: object
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
          - file_id
        start_index:
          type: integer
          minimum: 0
        end_index:
          type: integer
          minimum: 0
      required:
      - type
      - text
      - file_path
      - start_index
      - end_index
    messageContentTextObject:
      title: Text
      type: object
      description: The text content that is part of a message.
      properties:
        type:
          description: Always `text`.
          type: string
          enum:
          - text
          x-ms-enum:
            name: messageContentTextObjectType
            modelAsString: true
            values:
            - value: text
              description: The message content text Object type
        text:
          type: object
          properties:
            value:
              description: The data that makes up the text.
              type: string
            annotations:
              type: array
              items:
                oneOf:
                - $ref: '#/components/schemas/messageContentTextAnnotationsFileCitationObject'
                - $ref: '#/components/schemas/messageContentTextAnnotationsFilePathObject'
          required:
          - value
          - annotations
      required:
      - type
      - text
    messageObject:
      type: object
      title: The message object
      description: Represents a message within a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message`.
          type: string
          enum:
          - thread.message
          x-ms-enum:
            name: MessageObjectType
            modelAsString: true
            values:
            - value: thread.message
              description: The message object type which is `thread.message`
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          type: integer
        thread_id:
          description: The [thread](/docs/api-reference/threads) ID that this message
            belongs to.
          type: string
        status:
          description: The status of the message, which can be either `in_progress`,
            `incomplete`, or `completed`.
          type: string
          enum:
          - in_progress
          - incomplete
          - completed
          x-ms-enum:
            name: MessageObjectStatus
            modelAsString: true
            values:
            - value: in_progress
            - value: incomplete
            - value: completed
        incomplete_details:
          description: On an incomplete message, details about why the message is
            incomplete.
          type: object
          properties:
            reason:
              type: string
              description: The reason the message is incomplete.
              enum:
              - content_filter
              - max_tokens
              - run_cancelled
              - run_expired
              - run_failed
              x-ms-enum:
                name: MessageObjectIncompleteReason
                modelAsString: true
                values:
                - value: content_filter
                - value: max_tokens
                - value: run_cancelled
                - value: run_expired
                - value: run_failed
          nullable: true
          required:
          - reason
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          type: integer
          nullable: true
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked
            as incomplete.
          type: integer
          nullable: true
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          type: string
          enum:
          - user
          - assistant
          x-ms-enum:
            name: MessageObjectRole
            modelAsString: true
            values:
            - value: user
            - value: assistant
        content:
          description: The content of the message in array of text and/or images.
          type: array
          items:
            oneOf:
            - $ref: '#/components/schemas/messageContentImageFileObject'
            - $ref: '#/components/schemas/messageContentTextObject'
        assistant_id:
          description: If applicable, the ID of the assistant that authored this message.
          type: string
          nullable: true
        run_id:
          description: If applicable, the ID of the [run](/docs/api-reference/runs)
            associated with the authoring of this message.
          type: string
          nullable: true
        attachments:
          type: array
          items:
            type: object
            properties:
              file_id:
                type: string
                description: The ID of the file to attach to the message.
              tools:
                description: The tools to add this file to.
                type: array
                items:
                  oneOf:
                  - $ref: '#/components/schemas/assistantToolsCode'
                  - $ref: '#/components/schemas/assistantToolsFileSearchTypeOnly'
          description: A list of files attached to the message, and the tools they
            were added to.
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
      required:
      - id
      - object
      - created_at
      - thread_id
      - status
      - incomplete_details
      - completed_at
      - incomplete_at
      - role
      - content
      - assistant_id
      - run_id
      - attachments
      - metadata
    runCompletionUsage:
      type: object
      description: Usage statistics related to the run. This value will be `null`
        if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
      properties:
        completion_tokens:
          type: integer
          description: Number of completion tokens used over the course of the run.
        prompt_tokens:
          type: integer
          description: Number of prompt tokens used over the course of the run.
        total_tokens:
          type: integer
          description: Total number of tokens used (prompt + completion).
      required:
      - prompt_tokens
      - completion_tokens
      - total_tokens
      nullable: true
    runObject:
      type: object
      title: A run on a thread
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run`.
          type: string
          enum:
          - thread.run
          x-ms-enum:
            name: runObjectType
            modelAsString: true
            values:
            - value: thread.run
              description: The run object type which is always thread.run
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          type: integer
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was
            executed on as a part of this run.
          type: string
        assistant_id:
          description: The ID of the assistant used for execution of this run.
          type: string
        status:
          description: The status of the run, which can be either `queued`, `in_progress`,
            `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, or
            `expired`.
          type: string
          enum:
          - queued
          - in_progress
          - requires_action
          - cancelling
          - cancelled
          - failed
          - completed
          - expired
          x-ms-enum:
            name: RunObjectStatus
            modelAsString: true
            values:
            - value: queued
              description: The queued state
            - value: in_progress
              description: The in_progress state
            - value: requires_action
              description: The required_action state
            - value: cancelling
              description: The cancelling state
            - value: cancelled
              description: The cancelled state
            - value: failed
              description: The failed state
            - value: completed
              description: The completed state
            - value: expired
              description: The expired state
        required_action:
          type: object
          description: Details on the action required to continue the run. Will be
            `null` if no action is required.
          nullable: true
          properties:
            type:
              description: For now, this is always `submit_tool_outputs`.
              type: string
              enum:
              - submit_tool_outputs
            submit_tool_outputs:
              type: object
              description: Details on the tool outputs needed for this run to continue.
              properties:
                tool_calls:
                  type: array
                  description: A list of the relevant tool calls.
                  items:
                    $ref: '#/components/schemas/runToolCallObject'
              required:
              - tool_calls
          required:
          - type
          - submit_tool_outputs
        last_error:
          type: object
          description: The last error associated with this run. Will be `null` if
            there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - server_error
              - rate_limit_exceeded
              x-ms-enum:
                name: LastErrorCode
                modelAsString: true
                values:
                - value: server_error
                  description: The server failed to respond to request due to server
                    error
                - value: rate_limit_exceeded
                  description: The server failed to respond to request due to rate
                    limit exceeded
            message:
              type: string
              description: A human-readable description of the error.
          required:
          - code
          - message
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          type: integer
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          type: integer
          nullable: true
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          type: integer
          nullable: true
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          type: integer
          nullable: true
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          type: integer
          nullable: true
        incomplete_details:
          description: Details on why the run is incomplete. Will be `null` if the
            run is not incomplete.
          type: object
          nullable: true
          properties:
            reason:
              description: The reason why the run is incomplete. This will point to
                which specific token limit was reached over the course of the run.
              type: string
              enum:
              - max_completion_tokens
              - max_prompt_tokens
              x-ms-enum:
                name: IncompleteDetailsReason
                modelAsString: true
                values:
                - value: max_completion_tokens
                - value: max_prompt_tokens
        model:
          description: The model that the assistant used for this run.
          type: string
        instructions:
          description: The instructions that the assistant used for this run.
          type: string
        tools:
          description: The list of tools that the assistant used for this run.
          default: []
          type: array
          maxItems: 20
          items:
            oneOf:
            - $ref: '#/components/schemas/assistantToolsCode'
            - $ref: '#/components/schemas/assistantToolsFileSearch'
            - $ref: '#/components/schemas/assistantToolsFunction'
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
        usage:
          $ref: '#/components/schemas/runCompletionUsage'
        temperature:
          description: The sampling temperature used for this run. If not set, defaults
            to 1.
          type: number
          nullable: true
        top_p:
          description: The nucleus sampling value used for this run. If not set, defaults
            to 1.
          type: number
          nullable: true
        max_prompt_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of prompt tokens specified to have been
            used over the course of the run.

            '
          minimum: 256
        max_completion_tokens:
          type: integer
          nullable: true
          description: 'The maximum number of completion tokens specified to have
            been used over the course of the run.

            '
          minimum: 256
        truncation_strategy:
          $ref: '#/components/schemas/truncationObject'
          nullable: true
        tool_choice:
          $ref: '#/components/schemas/assistantsApiToolChoiceOption'
          nullable: true
        response_format:
          $ref: '#/components/schemas/assistantsApiResponseFormatOption'
          nullable: true
      required:
      - id
      - object
      - created_at
      - thread_id
      - assistant_id
      - status
      - required_action
      - last_error
      - expires_at
      - started_at
      - cancelled_at
      - failed_at
      - completed_at
      - model
      - instructions
      - tools
      - metadata
      - usage
      - incomplete_details
      - max_prompt_tokens
      - max_completion_tokens
      - truncation_strategy
      - tool_choice
      - response_format
    runToolCallObject:
      type: object
      description: Tool call objects
      properties:
        id:
          type: string
          description: The ID of the tool call. This ID must be referenced when you
            submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs)
            endpoint.
        type:
          type: string
          description: The type of tool call the output is required for. For now,
            this is always `function`.
          enum:
          - function
          x-ms-enum:
            name: RunToolCallObjectType
            modelAsString: true
            values:
            - value: function
        function:
          type: object
          description: The function definition.
          properties:
            name:
              type: string
              description: The name of the function.
            arguments:
              type: string
              description: The arguments that the model expects you to pass to the
                function.
          required:
          - name
          - arguments
      required:
      - id
      - type
      - function
    staticChunkingStrategy:
      type: object
      additionalProperties: false
      properties:
        max_chunk_size_tokens:
          type: integer
          minimum: 100
          maximum: 4096
          description: 'The maximum number of tokens in each chunk. The default value
            is `800`.

            The minimum value is `100` and the maximum value is `4096`.

            '
        chunk_overlap_tokens:
          type: integer
          description: 'The number of tokens that overlap between chunks. The default
            value is `400`. Note that the overlap must not exceed half of `max_chunk_size_tokens`.

            '
      required:
      - max_chunk_size_tokens
      - chunk_overlap_tokens
    staticChunkingStrategyRequestParam:
      type: object
      title: Static Chunking Strategy
      additionalProperties: false
      properties:
        type:
          type: string
          description: Always `static`.
          enum:
          - static
        static:
          $ref: '#/components/schemas/staticChunkingStrategy'
      required:
      - type
      - static
    submitToolOutputsRunRequest:
      type: object
      additionalProperties: false
      properties:
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          type: array
          items:
            type: object
            properties:
              tool_call_id:
                type: string
                description: The ID of the tool call in the `required_action` object
                  within the run object the output is being submitted for.
              output:
                type: string
                description: The output of the tool call to be submitted to continue
                  the run.
        stream:
          type: boolean
          nullable: true
          description: 'If `true`, returns a stream of events that happen during the
            Run as server-sent events, terminating when the Run enters a terminal
            state with a `data: [DONE]` message.

            '
      required:
      - tool_outputs
    threadObject:
      type: object
      title: Thread
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread`.
          type: string
          enum:
          - thread
          x-ms-enum:
            name: ThreadObjectType
            modelAsString: true
            values:
            - value: thread
              description: The type of thread object which is always `thread`
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        tool_resources:
          type: object
          description: 'A set of resources that are made available to the assistant''s
            tools in this thread. The resources are specific to the type of tool.
            For example, the `code_interpreter` tool requires a list of file IDs,
            while the `file_search` tool requires a list of vector store IDs.

            '
          properties:
            code_interpreter:
              type: object
              properties:
                file_ids:
                  type: array
                  description: 'A list of file IDs made available to the `code_interpreter`
                    tool. There can be a maximum of 20 files associated with the tool.

                    '
                  default: []
                  maxItems: 20
                  items:
                    type: string
            file_search:
              type: object
              properties:
                vector_store_ids:
                  type: array
                  description: 'The vector store attached to this thread. There can
                    be a maximum of 1 vector store attached to the thread.

                    '
                  maxItems: 1
                  items:
                    type: string
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
      required:
      - id
      - object
      - created_at
      - tool_resources
      - metadata
    truncationObject:
      type: object
      title: Thread Truncation Controls
      description: Controls for how a thread will be truncated prior to the run. Use
        this to control the intial context window of the run.
      properties:
        type:
          type: string
          description: The truncation strategy to use for the thread. The default
            is `auto`. If set to `last_messages`, the thread will be truncated to
            the n most recent messages in the thread. When set to `auto`, messages
            in the middle of the thread will be dropped to fit the context length
            of the model, `max_prompt_tokens`.
          enum:
          - auto
          - last_messages
          x-ms-enum:
            name: TruncationType
            modelAsString: true
            values:
            - value: auto
            - value: last_messages
        last_messages:
          type: integer
          description: The number of most recent messages from the thread when constructing
            the context for the run.
          minimum: 1
          nullable: true
      required:
      - type
    vectorStoreExpirationAfter:
      type: object
      title: Vector store expiration policy
      description: The expiration policy for a vector store.
      properties:
        anchor:
          description: 'Anchor timestamp after which the expiration policy applies.
            Supported anchors: `last_active_at`.'
          type: string
          enum:
          - last_active_at
          x-ms-enum:
            name: VectorStoreExpirationAfterAnchor
            modelAsString: true
            values:
            - value: last_active_at
              description: The anchor timestamp after which the expiration policy
                applies.
        days:
          description: The number of days after the anchor time that the vector store
            will expire.
          type: integer
          minimum: 1
          maximum: 365
      required:
      - anchor
      - days
    vectorStoreFileObject:
      type: object
      title: Vector store files
      description: A list of files attached to a vector store.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file`.
          type: string
          enum:
          - vector_store.file
          x-ms-enum:
            name: VectorStoreFileObjectType
            modelAsString: true
            values:
            - value: vector_store.file
        usage_bytes:
          description: The total vector store usage in bytes. Note that this may be
            different from the original file size.
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store file
            was created.
          type: integer
        vector_store_id:
          description: The ID of the vector store that the file is attached to.
          type: string
        status:
          description: The status of the vector store file, which can be either `in_progress`,
            `completed`, `cancelled`, or `failed`. The status `completed` indicates
            that the vector store file is ready for use.
          type: string
          enum:
          - in_progress
          - completed
          - cancelled
          - failed
          x-ms-enum:
            name: VectorStoreFileObjectStatus
            modelAsString: true
            values:
            - value: in_progress
            - value: completed
            - value: cancelled
            - value: failed
        last_error:
          type: object
          description: The last error associated with this vector store file. Will
            be `null` if there are no errors.
          nullable: true
          properties:
            code:
              type: string
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
              - internal_error
              - file_not_found
              - parsing_error
              - unhandled_mime_type
              x-ms-enum:
                name: VectorStoreFileObjectLastErrorCode
                modelAsString: true
                values:
                - value: internal_error
                - value: file_not_found
                - value: parsing_error
                - value: unhandled_mime_type
            message:
              type: string
              description: A human-readable description of the error.
          required:
          - code
          - message
        chunking_strategy:
          type: object
          description: 'The chunking strategy used to chunk the file(s). If not set,
            will use the

            `auto` strategy. Only applicable if `file_ids` is non-empty.

            '
          oneOf:
          - $ref: '#/components/schemas/autoChunkingStrategyRequestParam'
          - $ref: '#/components/schemas/staticChunkingStrategyRequestParam'
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - vector_store_id
      - status
      - last_error
    vectorStoreObject:
      type: object
      title: Vector store
      description: A vector store is a collection of processed files can be used by
        the `file_search` tool.
      properties:
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store`.
          type: string
          enum:
          - vector_store
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            created.
          type: integer
        name:
          description: The name of the vector store.
          type: string
        usage_bytes:
          description: The total number of bytes used by the files in the vector store.
          type: integer
        file_counts:
          type: object
          properties:
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            completed:
              description: The number of files that have been successfully processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            cancelled:
              description: The number of files that were cancelled.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
          - in_progress
          - completed
          - failed
          - cancelled
          - total
        status:
          description: The status of the vector store, which can be either `expired`,
            `in_progress`, or `completed`. A status of `completed` indicates that
            the vector store is ready for use.
          type: string
          enum:
          - expired
          - in_progress
          - completed
          x-ms-enum:
            name: VectorStoreObjectStatus
            modelAsString: true
            values:
            - value: expired
            - value: in_progress
            - value: completed
        expires_after:
          $ref: '#/components/schemas/vectorStoreExpirationAfter'
        expires_at:
          description: The Unix timestamp (in seconds) for when the vector store will
            expire.
          type: integer
          nullable: true
        last_active_at:
          description: The Unix timestamp (in seconds) for when the vector store was
            last active.
          type: integer
          nullable: true
        metadata:
          description: 'Set of 16 key-value pairs that can be attached to an object.
            This can be useful for storing additional information about the object
            in a structured format. Keys can be a maximum of 64 characters long and
            values can be a maximum of 512 characters long.

            '
          type: object
          nullable: true
      required:
      - id
      - object
      - usage_bytes
      - created_at
      - status
      - last_active_at
      - name
      - file_counts
      - metadata
